//
//Copyright 2012 Google Inc.
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: testpb/test.proto

package testpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GroupCacheTest_InitPeers_FullMethodName = "/testpb.GroupCacheTest/InitPeers"
	GroupCacheTest_Get_FullMethodName       = "/testpb.GroupCacheTest/Get"
	GroupCacheTest_GetStats_FullMethodName  = "/testpb.GroupCacheTest/GetStats"
)

// GroupCacheTestClient is the client API for GroupCacheTest service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GroupCacheTestClient interface {
	InitPeers(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	Get(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (*TestResponse, error)
	GetStats(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StatsResponse, error)
}

type groupCacheTestClient struct {
	cc grpc.ClientConnInterface
}

func NewGroupCacheTestClient(cc grpc.ClientConnInterface) GroupCacheTestClient {
	return &groupCacheTestClient{cc}
}

func (c *groupCacheTestClient) InitPeers(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, GroupCacheTest_InitPeers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupCacheTestClient) Get(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (*TestResponse, error) {
	out := new(TestResponse)
	err := c.cc.Invoke(ctx, GroupCacheTest_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupCacheTestClient) GetStats(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StatsResponse, error) {
	out := new(StatsResponse)
	err := c.cc.Invoke(ctx, GroupCacheTest_GetStats_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GroupCacheTestServer is the server API for GroupCacheTest service.
// All implementations must embed UnimplementedGroupCacheTestServer
// for forward compatibility
type GroupCacheTestServer interface {
	InitPeers(context.Context, *Empty) (*Empty, error)
	Get(context.Context, *TestRequest) (*TestResponse, error)
	GetStats(context.Context, *Empty) (*StatsResponse, error)
	mustEmbedUnimplementedGroupCacheTestServer()
}

// UnimplementedGroupCacheTestServer must be embedded to have forward compatible implementations.
type UnimplementedGroupCacheTestServer struct {
}

func (UnimplementedGroupCacheTestServer) InitPeers(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitPeers not implemented")
}
func (UnimplementedGroupCacheTestServer) Get(context.Context, *TestRequest) (*TestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedGroupCacheTestServer) GetStats(context.Context, *Empty) (*StatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStats not implemented")
}
func (UnimplementedGroupCacheTestServer) mustEmbedUnimplementedGroupCacheTestServer() {}

// UnsafeGroupCacheTestServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GroupCacheTestServer will
// result in compilation errors.
type UnsafeGroupCacheTestServer interface {
	mustEmbedUnimplementedGroupCacheTestServer()
}

func RegisterGroupCacheTestServer(s grpc.ServiceRegistrar, srv GroupCacheTestServer) {
	s.RegisterService(&GroupCacheTest_ServiceDesc, srv)
}

func _GroupCacheTest_InitPeers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupCacheTestServer).InitPeers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupCacheTest_InitPeers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupCacheTestServer).InitPeers(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupCacheTest_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupCacheTestServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupCacheTest_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupCacheTestServer).Get(ctx, req.(*TestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupCacheTest_GetStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupCacheTestServer).GetStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupCacheTest_GetStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupCacheTestServer).GetStats(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// GroupCacheTest_ServiceDesc is the grpc.ServiceDesc for GroupCacheTest service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GroupCacheTest_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "testpb.GroupCacheTest",
	HandlerType: (*GroupCacheTestServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InitPeers",
			Handler:    _GroupCacheTest_InitPeers_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _GroupCacheTest_Get_Handler,
		},
		{
			MethodName: "GetStats",
			Handler:    _GroupCacheTest_GetStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "testpb/test.proto",
}
